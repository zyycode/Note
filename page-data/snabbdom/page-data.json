{"componentChunkName":"component---src-templates-blog-post-js","path":"/snabbdom/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"cd0b875f-916e-570e-8aa5-feadb375066f","excerpt":"官方是这么介绍 Snabbdom 的： A virtual DOM library with focus on simplicity, modularity, powerful features and performance. 一个具有简单性、模块化、强大的功能和性能的虚拟 DOM 库。那什么是虚拟 DOM…","html":"<p><a href=\"https://github.com/snabbdom/snabbdom\">官方</a>是这么介绍 Snabbdom 的：</p>\n<blockquote>\n<p>A virtual DOM library with focus on simplicity, modularity, powerful features and performance.</p>\n</blockquote>\n<p>一个具有简单性、模块化、强大的功能和性能的虚拟 DOM 库。那什么是虚拟 DOM，以及为什么要使用虚拟 DOM 呢？</p>\n<h3>Virtual DOM</h3>\n<blockquote>\n<p>由普通的 JS 对象来描述 DOM 对象，是对真实 DOM 的一种抽象，因为不是真的 DOM 对象，所以叫 Virtual DOM。</p>\n</blockquote>\n<p>真实的 DOM</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.logged-in'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> ele<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  s <span class=\"token operator\">+=</span> key <span class=\"token operator\">+</span> '<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n<p>虚拟 DOM</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  el<span class=\"token operator\">:</span> 'div<span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>为什么要使用 Virtual DOM</strong></p>\n<ul>\n<li>手动操作 DOM 比较麻烦，虽然有 jQuery 这样的库简化DOM操作，但没有解决大批量操作 DOM 的性能问题（虽然可以使用一些技巧，比如试用 DocumentFragment 将多次 DOM 操作进行一次挂载，但是这样随着项目体积的增加，维护起来非常痛苦）。</li>\n<li>为了简化 DOM 操作出现了各种 MVVM 框架，解决了视图和状态同步问题。</li>\n<li>简化视图的操作可以使用模板引擎，但是模板引擎没有解决跟踪状态变化的问题，于是 Virtual DOM 出现了。</li>\n<li>\n<p><a href=\"https://github.com/Matt-Esch/virtual-dom\">Virtual DOM</a> 的好处是当状态改变时不需要立即更新 DOM，只需要创建一个虚拟树来描述 DOM，Virtual DOM 内部来更有效的更新 DOM (diff)。</p>\n<ul>\n<li>虚拟 DOM 可以维护程序的状态，跟踪上一次的状态。</li>\n<li>通过比较前后两次状态的差异更新真实 DOM。</li>\n</ul>\n</li>\n</ul>\n<p><strong>Virtual DOM 的作用</strong></p>\n<ul>\n<li>维护视图和状态的关系</li>\n<li>复杂视图情况下提升渲染性能</li>\n<li>出来渲染真实 DOM 外，还可以实现 SSR(Nuxt.js/Next.js)、原生应用(Weex/React Native)、小程序(mpvue/uni-app)等</li>\n</ul>\n<blockquote>\n<p>举个操作真实 DOM 和虚拟 DOM 差异的例子。</p>\n</blockquote>\n<p><strong>Virtual DOM 需要解决的问题</strong></p>\n<ul>\n<li>高效的 diff 算法，即两个 Virtual DOM 的比较</li>\n<li>只更新需要更新的 DOM 节点</li>\n<li>数据变化检测，批量 DOM 读写操作等等</li>\n</ul>\n<h3>Snabbdom 基本使用</h3>\n<p>Snabbdom 的引入方式(ES6 模块和 Common JS 的差异)，同时 v1 版本有所区别。</p>\n<p>snabbdom 主要就几个函数</p>\n<p><code class=\"language-text\">init</code> 是一个高阶函数，返回 <code class=\"language-text\">patch</code> 函数。</p>\n<p>模块：官方提供了6个模块，attitudes props class dataset eventlisteners style</p>\n<h3>Snabbdom 源码分析</h3>\n<p><strong>如何学习源码：</strong></p>\n<ul>\n<li>先宏观了解</li>\n<li>带着目标看源码</li>\n<li>看源码的过程要不求甚解</li>\n<li>调试</li>\n<li>参考资料（比如网上其他源码分析的文章）</li>\n</ul>\n<p><strong>Snabbdom 的核心：</strong></p>\n<ul>\n<li>使用<code class=\"language-text\">h</code>函数创建 JavaScript 对象（VNode）描述真实 DOM</li>\n<li><code class=\"language-text\">init</code>设置模块，创建<code class=\"language-text\">patch</code></li>\n<li><code class=\"language-text\">patch</code>比较新旧两个 VNode</li>\n<li>把变化的内容更新到真实的 DOM 树上</li>\n</ul>\n<h4>init 函数</h4>\n<h4>patch 函数</h4>\n<p>比较新旧两个 VDOM 树并更新</p>\n<h4>h 函数</h4>\n<p>返回一个 vnode 对象。</p>\n<p>Vue 中就有 h 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>函数的重载：</strong> </p>\n<ul>\n<li>参数个数或类型不同的函数</li>\n<li>JavaScript 中没有重载的概念</li>\n<li>TypeScript 中有重载，不过重载的实现还是通过代码调整参数</li>\n</ul>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>patch 函数</h4>\n<p>打补丁，把新节点中变化的内容渲染到真实 DOM，最后返回新节点作为下一次处理的旧节点。</p>\n<ul>\n<li>对比新旧 VNode 是否是相同的节点（根据节点的 key 和 sel 进行判断；判断两个数的时间复杂度一般是O(n^3), 通过这连个条件可以降低复杂度为O(n)）</li>\n<li>如果不是相同节点，则直接替换</li>\n<li>如果是相同节点，再判断新的 VNode 是否有 text，如果有并且和 oldVNode 的 text 不同，直接更新文本</li>\n<li>如果新的 VNode 有 children，判断子节点是否有变化，判断子节点的过程使用的就是 diff 算法</li>\n<li>diff 过程只进行同层级比较</li>\n</ul>\n<p><a href=\"\">React Diff 算法</a></p>\n<h4>createElm 函数</h4>\n<p>把 vnode 转化为 DOM 元素。</p>\n<p>createElm</p>\n<ul>\n<li>触发用户钩子函数 init</li>\n<li>\n<p>把 vnode 转换为 DOM 对象，存储到 vnode.elm 中（没有渲染到页面）</p>\n<ul>\n<li>\n<p>sel 是 !</p>\n<ul>\n<li>创建注释节点</li>\n</ul>\n</li>\n<li>\n<p>sel 不为空</p>\n<ul>\n<li>创建对应的 DOM 对象</li>\n<li>触发模块的的狗子函数 create</li>\n<li>创建所有子节点对用的 DOM 对象</li>\n<li>触发用户的的钩子函数 create</li>\n<li>如果 vnode 有 insert 钩子函数，追加到队列</li>\n</ul>\n</li>\n<li>\n<p>sel 为空</p>\n<ul>\n<li>创建文本节点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>返回 vnode</li>\n</ul>\n<h4>patchVnode 函数</h4>\n<p>patchVnode</p>\n<ul>\n<li>触发 prepatch 钩子函数</li>\n<li>触发 update 钩子函数</li>\n<li>\n<p>新节点有 text 属性，且不等于旧节点的 text 属性</p>\n<ul>\n<li>如果老节点有 children</li>\n<li>移除老节点 children 对应的 DOM 元素</li>\n<li>设置新节点对应 DOM 元素的 textContent</li>\n</ul>\n</li>\n<li>\n<p>新老节点都有 children， 且不相等</p>\n<ul>\n<li>调用 updateChildren()</li>\n<li>对比子节点，并且更新子节点的差异</li>\n</ul>\n</li>\n<li>\n<p>只有新节点有 children 属性</p>\n<ul>\n<li>如果老节点有 text 属性</li>\n<li>清空对应 DOM 元素的 textContent</li>\n<li>添加所有子节点</li>\n</ul>\n</li>\n<li>只有老节点有 chidlren 属性</li>\n<li>只有老节点有 text 属性</li>\n<li>触发 postpatch 钩子函数</li>\n</ul>","frontmatter":{"title":"Snabbdom 源码","date":"August 31, 2020","description":"分享"}}},"pageContext":{"slug":"/snabbdom/","previous":{"fields":{"slug":"/reading/"},"frontmatter":{"title":"重构"}},"next":{"fields":{"slug":"/interview/"},"frontmatter":{"title":"面试"}}}}}